*skeleton.txt*	Initialize new Vim buffers with file-type-specific templates
Noah Frederick                                           *Skeleton* *skeleton*

==============================================================================
CONTENTS                                                   *skeleton-contents*
  1. Introduction.............................................|skeleton-intro|
  2. Configuration...........................................|skeleton-config|
  3. Commands..............................................|skeleton-commands|
  4. About....................................................|skeleton-about|

==============================================================================
INTRODUCTION                                                  *skeleton-intro*

Skeleton initializes new Vim buffers with filename and file-type-specific
templates.

Add something like the following to ~/.vim/templates/skel.xml:
>
  <?xml version="1.0" encoding="UTF-8" ?>
  <@BASENAME@>
      @CURSOR@
  </@BASENAME@>
<
And when you create a new buffer, e.g., books.xml, it will be initialized with
your template:
>
  <?xml version="1.0" encoding="UTF-8" ?>
  <books>
      [cursor is here]
  </books>
<

Add something like the following to ~/.vim/templates/jsconfig.json
>
  {
    "compilerOptions": {
      "checkJs": true
    }
  }
<
And when you create a new buffer jsconfig.json, it will be initialized with
your template.

It differs from a snippet plug-in in that it is concerned with initializing
new buffers with boilerplate text without any manual intervention such as
triggering a snippet.

Skeleton stays out of your way: it will never load a template unless the
buffer is empty and is not associated with an existing file on disk. And if
you don't happen to want to use the template for a particular file, issuing
|undo| (u) will restore your empty buffer.

This plug-in is only available if 'compatible' is not set.

==============================================================================
CONFIGURATION                                                *skeleton-config*

                                                     *g:skeleton_template_dir*
The directory that contains skeleton template files. Example:
>
  let g:skeleton_template_dir = "~/.vim/templates"
<
Default: "~/.vim/templates"

                                                     *g:skeleton_replacements*
Dictionary of custom global replacement functions. Each function should be
named after the corresponding template placeholder, and should return the
value with which the placeholder will be substituted. For example:
>
  function! g:skeleton_replacements.TITLE()
    return "The Title"
  endfunction
<
Registering the above function would replace the @TITLE@ placeholder with the
return value, "The Title".

Default: {}

To create one or more replacements for a particular file-type, add your
function instead to a g:skeleton_replacements_{filetype} dictionary. For
example, to create a TITLE placeholder for Ruby files:
>
  let g:skeleton_replacements_ruby = {}

  function! g:skeleton_replacements_ruby.TITLE()
    return "The Title"
  endfunction
<
This will override g:skeleton_replacements.TITLE() (if defined) for Ruby
files.

                                                    *g:skeleton_find_template*
Dictionary of custom template-finding functions. Each function should be named
after the filetype to which the function applies, and should return the path
to the template file relative to your template directory. Functions are passed
one parameter containing the buffer's filename. For example:
>
  function! g:skeleton_find_template.ruby(path)
    if stridx(a:path, '/controllers/') != -1
      return 'controller.rb'
    endif
    return ''
  endfunction
<
Returning an empty string falls back to Skeleton's default methods of locating
the template. In the above example, a custom controller.rb template is used if
and only if the passed path contains a "/controllers/" segment.

Default: {}

==============================================================================
COMMANDS                                                   *skeleton-commands*

:SkelEdit[!] [template]                                            *:SkelEdit*
  Edits a template file. If the optional [template] argument is omitted, edits
  the template inserted into the current buffer.

:SkelInsert[!] [template]                                        *:SkelInsert*
  Inserts the specified [template] into the current buffer if it is empty. If
  [!] is supplied after the command, the buffer's contents will be replaced by
  the template. If the template name is omitted, the normal rules for
  determining the template to use are applied.

==============================================================================
ABOUT                                                         *skeleton-about*

Skeleton is distributed under the same terms as Vim itself (see |license|)

You can find the latest version of this plug-in on GitHub:
https://github.com/noahfrederick/vim-skeleton

Please report issues on GitHub as well:
https://github.com/noahfrederick/vim-skeleton/issues


vim:tw=78:ts=8:ft=help:norl:
